/*  =========================================================================
    zm_proto - Basic messaging for zmon.it

    Codec header for zm_proto.

    ** WARNING *************************************************************
    THIS SOURCE FILE IS 100% GENERATED. If you edit this file, you will lose
    your changes at the next build cycle. This is great for temporary printf
    statements. DO NOT MAKE ANY CHANGES YOU WISH TO KEEP. The correct places
    for commits are:

     * The XML model used for this code generation: zm_proto.xml, or
     * The code generation script that built this file: zproto_codec_c
    ************************************************************************
    Copyright (c) the Contributors as noted in the AUTHORS file.  This file is part
    of zmon.it, the fast and scalable monitoring system.                           
                                                                                   
    This Source Code Form is subject to the terms of the Mozilla Public License, v.
    2.0. If a copy of the MPL was not distributed with this file, You can obtain   
    one at http://mozilla.org/MPL/2.0/.                                            
    =========================================================================
*/

#ifndef ZM_PROTO_H_INCLUDED
#define ZM_PROTO_H_INCLUDED
#include "zm_proto_library.h"

/*  These are the zm_proto messages:

    METRIC - 
        device              string      Device universal unique identifier
        time                number 8    Time when message was generated
        ttl                 number 4    Time to live, after $current time > time - ttl, message is droped
        ext                 hash        Additional extended informations for the message
        type                string      Metric name, e.g.: "temperature", "humidity", "power.load", ...
        value               string      Metric value, e.g.: "25.323" or "900".
        unit                string      Metric unit, e.g.: "C" or "F" for temperature, "W" or "kW" for realpower etc...

    ALERT - 
        device              string      Device universal unique identifier
        time                number 8    Time when message was generated
        ttl                 number 4    Time to live, after $current time > time - ttl, message is droped
        ext                 hash        Additional extended informations for the message
        rule                string      Identifier of the rule which triggers this alert.
        severity            number 1    Alert is present and critical (value > 0) or resolved (value 0).
        description         string      Alert description.

    DEVICE - 
        device              string      Device universal unique identifier
        time                number 8    Time when message was generated
        ttl                 number 4    Time to live, after $current time > time - ttl, message is droped
        ext                 hash        Additional extended informations for the message

    OK - 
        device              string      Device universal unique identifier
        time                number 8    Time when message was generated
        ttl                 number 4    Time to live, after $current time > time - ttl, message is droped
        ext                 hash        Additional extended informations for the message

    ERROR - 
        device              string      Device universal unique identifier
        time                number 8    Time when message was generated
        ttl                 number 4    Time to live, after $current time > time - ttl, message is droped
        ext                 hash        Additional extended informations for the message
        code                number 2    (HTTP?) Error code
        description         string      Error description.
*/

#include <czmq.h>

#ifdef __cplusplus
extern "C" {
#endif

//  Opaque class structure
#ifndef ZM_PROTO_T_DEFINED
typedef struct _zm_proto_t zm_proto_t;
#define ZM_PROTO_T_DEFINED
#endif

//  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
//  @warning Please edit the model at "api/zm_proto.api" to make changes.
//  @interface
//  This is a stable class, and may not change except for emergencies. It
//  is provided in stable builds.
#define ZM_PROTO_METRIC_STREAM "METRICS"      // 
#define ZM_PROTO_ALERT_STREAM "ALERTS"        // 
#define ZM_PROTO_DEVICE_STREAM "DEVICES"      // 
#define ZM_PROTO_METRIC 1                   // 
#define ZM_PROTO_ALERT 2                    // 
#define ZM_PROTO_DEVICE 3                   // 
#define ZM_PROTO_OK 4                       // 
#define ZM_PROTO_ERROR 5                    // 

//  Create a new empty zm_proto
ZM_PROTO_EXPORT zm_proto_t *
    zm_proto_new (void);

//  Create a new zm_proto from zpl/zconfig_t *
ZM_PROTO_EXPORT zm_proto_t *
    zm_proto_new_zpl (zconfig_t *config);

//  Destroy a zm_proto instance
ZM_PROTO_EXPORT void
    zm_proto_destroy (zm_proto_t **self_p);

//  Create a deep copy of a zm_proto instance
ZM_PROTO_EXPORT zm_proto_t*
    zm_proto_dup (zm_proto_t *self);

//  Deserialize a zm_proto from the specified message, popping          
//  as many frames as needed. Returns 0 if OK, -1 if there was an error.
ZM_PROTO_EXPORT int
    zm_proto_recv (zm_proto_t *self, zmsg_t *input);

//  Serialize and append the zm_proto to the specified message
ZM_PROTO_EXPORT int
    zm_proto_send (zm_proto_t *self, zmsg_t *output);

//  Print contents of message to stdout
ZM_PROTO_EXPORT void
    zm_proto_print (zm_proto_t *self);

//  Export class as zconfig_t*. Caller is responsibe for destroying the instance
//  Caller owns return value and must destroy it when done.
ZM_PROTO_EXPORT zconfig_t *
    zm_proto_zpl (zm_proto_t *self, zconfig_t *parent);

//  Get the message routing id, as a frame
ZM_PROTO_EXPORT zframe_t *
    zm_proto_routing_id (zm_proto_t *self);

//  Set the message routing id from a frame
ZM_PROTO_EXPORT void
    zm_proto_set_routing_id (zm_proto_t *self, zframe_t *routing_id);

//  Get the zm_proto message id
ZM_PROTO_EXPORT int
    zm_proto_id (zm_proto_t *self);

//  Set the zm_proto message id
ZM_PROTO_EXPORT void
    zm_proto_set_id (zm_proto_t *self, int id);

//  Get the zm_proto message id as printable text
ZM_PROTO_EXPORT const char *
    zm_proto_command (zm_proto_t *self);

//  Get the device field
ZM_PROTO_EXPORT const char *
    zm_proto_device (zm_proto_t *self);

//  Set the device field
ZM_PROTO_EXPORT void
    zm_proto_set_device (zm_proto_t *self, const char *device);

//  Get the time field
ZM_PROTO_EXPORT uint64_t
    zm_proto_time (zm_proto_t *self);

//  Set the time field
ZM_PROTO_EXPORT void
    zm_proto_set_time (zm_proto_t *self, uint64_t time);

//  Get the ttl field
ZM_PROTO_EXPORT uint32_t
    zm_proto_ttl (zm_proto_t *self);

//  Set the ttl field
ZM_PROTO_EXPORT void
    zm_proto_set_ttl (zm_proto_t *self, uint32_t ttl);

//  Get a copy of the ext field
ZM_PROTO_EXPORT zhash_t *
    zm_proto_ext (zm_proto_t *self);

//  Get the ext field and transfer ownership to caller
ZM_PROTO_EXPORT zhash_t *
    zm_proto_get_ext (zm_proto_t *self);

//  
ZM_PROTO_EXPORT void
    zm_proto_set_ext (zm_proto_t *self, zhash_t **ext_p);

//  Get the type field
ZM_PROTO_EXPORT const char *
    zm_proto_type (zm_proto_t *self);

//  Set the type field
ZM_PROTO_EXPORT void
    zm_proto_set_type (zm_proto_t *self, const char *type);

//  Get the value field
ZM_PROTO_EXPORT const char *
    zm_proto_value (zm_proto_t *self);

//  Set the value field
ZM_PROTO_EXPORT void
    zm_proto_set_value (zm_proto_t *self, const char *value);

//  Get the unit field
ZM_PROTO_EXPORT const char *
    zm_proto_unit (zm_proto_t *self);

//  Set the unit field
ZM_PROTO_EXPORT void
    zm_proto_set_unit (zm_proto_t *self, const char *unit);

//  Get the rule field
ZM_PROTO_EXPORT const char *
    zm_proto_rule (zm_proto_t *self);

//  Set the rule field
ZM_PROTO_EXPORT void
    zm_proto_set_rule (zm_proto_t *self, const char *rule);

//  Get the severity field
ZM_PROTO_EXPORT uint8_t
    zm_proto_severity (zm_proto_t *self);

//  Set the severity field
ZM_PROTO_EXPORT void
    zm_proto_set_severity (zm_proto_t *self, uint8_t severity);

//  Get the description field
ZM_PROTO_EXPORT const char *
    zm_proto_description (zm_proto_t *self);

//  Set the description field
ZM_PROTO_EXPORT void
    zm_proto_set_description (zm_proto_t *self, const char *description);

//  Get the code field
ZM_PROTO_EXPORT uint32_t
    zm_proto_code (zm_proto_t *self);

//  Set the code field
ZM_PROTO_EXPORT void
    zm_proto_set_code (zm_proto_t *self, uint32_t code);

//  Self test of this class.
ZM_PROTO_EXPORT void
    zm_proto_test (bool verbose);

//  @end

//  For backwards compatibility with old codecs
#define zm_proto_dump       zm_proto_print

#ifdef __cplusplus
}
#endif

#endif
