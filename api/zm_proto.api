<!--
    zm_proto - Basic messaging for zmon.it

    Codec class for zm_proto.

    ** WARNING *************************************************************
    THIS SOURCE FILE IS 100% GENERATED. If you edit this file, you will lose
    your changes at the next build cycle. This is great for temporary printf
    statements. DO NOT MAKE ANY CHANGES YOU WISH TO KEEP. The correct places
    for commits are:

     * The XML model used for this code generation: zm_proto.xml, or
     * The code generation script that built this file: zproto_codec_c
    ************************************************************************
    Copyright (c) the Contributors as noted in the AUTHORS file.  This file is part
    of zmon.it, the fast and scalable monitoring system.                           
                                                                                   
    This Source Code Form is subject to the terms of the Mozilla Public License, v.
    2.0. If a copy of the MPL was not distributed with this file, You can obtain   
    one at http://mozilla.org/MPL/2.0/.                                            
 -->
<class name = "zm_proto">
    <constant name = "metric_stream" value = "METRICS" />
    <constant name = "alert_stream" value = "ALERTS" />
    <constant name = "device_stream" value = "DEVICES" />
    <constant name = "metric" value = "1" />
    <constant name = "alert" value = "2" />
    <constant name = "device" value = "3" />
    <constant name = "ok" value = "4" />
    <constant name = "error" value = "5" />

<constructor>
    Create a new empty zm_proto
</constructor>
    
<constructor name = "new_zpl">
    Create a new zm_proto from zpl/zconfig_t *
    <argument name = "config" type = "zconfig" />
</constructor>

<destructor>
    Destroy a zm_proto instance
</destructor>

<method name = "dup">
    Create a deep copy of a zm_proto instance
    <return type="zm_proto" fresh="1" />
</method>

<method name = "recv">
    Deserialize a zm_proto from the specified message, popping
    as many frames as needed. Returns 0 if OK, -1 if there was an error.
    <argument name = "input" type = "zmsg" />
    <return type = "integer" />
</method>

<method name = "send">
    Serialize and append the zm_proto to the specified message
    <argument name = "output" type = "zmsg" />
    <return type = "integer" />
</method>

<method name = "print">
    Print contents of message to stdout
</method>

<method name = "zpl">
    Export class as zconfig_t*. Caller is responsibe for destroying the instance
    <argument name = "parent" type = "zconfig" />
    <return type = "zconfig" fresh = "1" />
</method>


<method name = "routing id">
    Get the message routing id, as a frame
    <return type = "zframe" />
</method>

<method name = "set routing id">
    Set the message routing id from a frame
    <argument name = "routing id" type = "zframe" />
</method>

<method name = "id">
    Get the zm_proto message id
    <return type = "integer" />
</method>

<method name = "set id">
    Set the zm_proto message id
    <argument name = "id" type = "integer" />
</method>

<method name = "command">
    Get the zm_proto message id as printable text
    <return type = "string" />
</method>

<method name = "device">
    Get the device field
    <return type = "string" />
</method>
<method name = "set device">
    Set the device field
    <argument name = "device" type = "string" />
</method>
<method name = "time">
    Get the time field
    <return type = "number" size = "8" />
</method>
<method name = "set time">
    Set the time field
    <argument name = "time" type = "number" size = "8" />
</method>
<method name = "ttl">
    Get the ttl field
    <return type = "number" size = "4" />
</method>
<method name = "set ttl">
    Set the ttl field
    <argument name = "ttl" type = "number" size = "4" />
</method>
<method name = "ext">
    Get a copy of the ext field
    <return type = "zhash" />
</method>
<method name = "get ext">
    Get the ext field and transfer ownership to caller
    <return type = "zhash" />
</method>
    Set the ext field, transferring ownership from caller
<method name = "set ext">
    <argument name = "ext_p" type = "zhash" by_reference = "1" />
</method>
<method name = "type">
    Get the type field
    <return type = "string" />
</method>
<method name = "set type">
    Set the type field
    <argument name = "type" type = "string" />
</method>
<method name = "value">
    Get the value field
    <return type = "string" />
</method>
<method name = "set value">
    Set the value field
    <argument name = "value" type = "string" />
</method>
<method name = "unit">
    Get the unit field
    <return type = "string" />
</method>
<method name = "set unit">
    Set the unit field
    <argument name = "unit" type = "string" />
</method>
<method name = "rule">
    Get the rule field
    <return type = "string" />
</method>
<method name = "set rule">
    Set the rule field
    <argument name = "rule" type = "string" />
</method>
<method name = "severity">
    Get the severity field
    <return type = "number" size = "1" />
</method>
<method name = "set severity">
    Set the severity field
    <argument name = "severity" type = "number" size = "1" />
</method>
<method name = "description">
    Get the description field
    <return type = "string" />
</method>
<method name = "set description">
    Set the description field
    <argument name = "description" type = "string" />
</method>
<method name = "code">
    Get the code field
    <return type = "number" size = "4" />
</method>
<method name = "set code">
    Set the code field
    <argument name = "code" type = "number" size = "4" />
</method>
</class>
